name: Build and Test Multi-Architecture Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build ${{ matrix.arch }} Image
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-22.04
            platform: linux/amd64
            dockerfile: Dockerfile.x86_64
            description: "AMD64 - Development/Testing"

          - arch: arm64
            runner: ubuntu-22.04-arm
            platform: linux/arm64
            dockerfile: Dockerfile.arm64
            description: "ARM64"
            build-args: |
              OPTFLAGS=-O3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.arch }}
            type=ref,event=pr,suffix=-${{ matrix.arch }}
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.arch }}
            type=raw,value=latest-${{ matrix.arch }},enable={{is_default_branch}}
            type=sha,suffix=-${{ matrix.arch }}

      # Build the Docker image
      - name: Build ${{ matrix.arch }} Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: jon-babylon:${{ matrix.arch }}-test
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,scope=${{ matrix.arch }},mode=max
          build-args: ${{ matrix.build-args }}

      # Run tests sequentially for better log readability
      - name: Test - Version Check
        run: |
          echo "=== Testing ${{ matrix.description }} ==="
          echo "Checking installed tool versions..."
          docker run --rm jon-babylon:${{ matrix.arch }}-test /scripts/check_versions.sh

      - name: Test - Java (Maven, Gradle)
        run: |
          echo "=== Testing Java with Maven and Gradle ==="
          docker run --rm -v ${{ github.workspace }}/tests/java:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - Kotlin
        if: always()
        run: |
          echo "=== Testing Kotlin ==="
          docker run --rm -v ${{ github.workspace }}/tests/kotlin:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - Clojure (Leiningen)
        if: always()
        run: |
          echo "=== Testing Clojure with Leiningen ==="
          docker run --rm -v ${{ github.workspace }}/tests/clojure:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - Python (pip, black, flake8, ruff, mypy, pytest, Nuitka)
        if: always()
        run: |
          echo "=== Testing Python and tools ==="
          docker run --rm -v ${{ github.workspace }}/tests/python:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - Rust (cargo, rustfmt, clippy)
        if: always()
        run: |
          echo "=== Testing Rust with Cargo ==="
          docker run --rm -v ${{ github.workspace }}/tests/rust:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - C/C++ (clang, clang-format, clang-tidy)
        if: always()
        run: |
          echo "=== Testing C/C++ with Clang ==="
          docker run --rm -v ${{ github.workspace }}/tests/c:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"
          docker run --rm -v ${{ github.workspace }}/tests/cpp:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - Node.js (npm, yarn, pnpm)
        if: always()
        run: |
          echo "=== Testing Node.js and package managers ==="
          docker run --rm -v ${{ github.workspace }}/tests/nodejs:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test - Web Stack (TypeScript, ESLint, Prettier, esbuild)
        if: always()
        run: |
          echo "=== Testing Web Development Stack ==="
          docker run --rm -v ${{ github.workspace }}/tests/web:/workspace \
            jon-babylon:${{ matrix.arch }}-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Check optimization flags (ARM64 only)
        if: matrix.arch == 'arm64' && always()
        run: |
          echo "=== Verifying ARM64 optimizations ==="
          docker run --rm jon-babylon:${{ matrix.arch }}-test bash -c "
            echo 'GCC flags:';
            gcc -E -v - </dev/null 2>&1 | grep -E 'march|mtune' || echo 'No specific optimizations';
            echo '';
            echo 'Rust target CPU:';
            rustc --print cfg | grep target_cpu || echo 'Default target';
            echo '';
            echo 'Python build info:';
            python3 -c 'import sysconfig; print(sysconfig.get_config_var(\"CFLAGS\"))' || echo 'No Python CFLAGS';
          "

      # Push to registry only if tests pass
      - name: Push image to registry
        if: github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          build-args: ${{ matrix.build-args }}

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary: ${{ matrix.description }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runner**: ${{ matrix.runner }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dockerfile**: ${{ matrix.dockerfile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          docker images | grep jon-babylon | head -5 >> $GITHUB_STEP_SUMMARY || echo "No images found"
          echo '```' >> $GITHUB_STEP_SUMMARY

  create-manifest:
    name: Create Multi-Architecture Manifest
    needs: build
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request' && success()
    permissions:
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # Determine the tag to use
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAGS=("latest")
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAGS=("${{ github.ref_name }}" "latest")
          else
            TAGS=("sha-${{ github.sha }}")
          fi

          # Create and push manifests for each tag
          for TAG in "${TAGS[@]}"; do
            echo "Creating manifest for tag: ${TAG}"

            docker manifest create \
              ghcr.io/${{ github.repository }}:${TAG} \
              ghcr.io/${{ github.repository }}:${TAG}-amd64 \
              ghcr.io/${{ github.repository }}:${TAG}-arm64

            docker manifest annotate \
              ghcr.io/${{ github.repository }}:${TAG} \
              ghcr.io/${{ github.repository }}:${TAG}-arm64 \
              --os linux --arch arm64 --variant v8

            docker manifest annotate \
              ghcr.io/${{ github.repository }}:${TAG} \
              ghcr.io/${{ github.repository }}:${TAG}-amd64 \
              --os linux --arch amd64

            docker manifest push ghcr.io/${{ github.repository }}:${TAG}

            echo "âœ… Pushed manifest: ghcr.io/${{ github.repository }}:${TAG}" >> $GITHUB_STEP_SUMMARY
          done

      - name: Generate manifest summary
        run: |
          echo "## Multi-Architecture Manifest Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Images" >> $GITHUB_STEP_SUMMARY
          echo "- **Multi-arch**: \`ghcr.io/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **AMD64**: \`ghcr.io/${{ github.repository }}:latest-amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **ARM64**: \`ghcr.io/${{ github.repository }}:latest-arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Auto-select architecture" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ghcr.io/${{ github.repository }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run interactive shell" >> $GITHUB_STEP_SUMMARY
          echo "docker run -it --rm ghcr.io/${{ github.repository }}:latest bash" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY