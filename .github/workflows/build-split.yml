name: Build Split Containers

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dockerfiles/**'
      - 'tools/**'
      - 'scripts/**'
      - '.github/workflows/build-split.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'dockerfiles/**'
      - 'tools/**'
      - 'scripts/**'
      - '.github/workflows/build-split.yml'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push images to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/jon-babylon

jobs:
  # Build base image first
  build-base:
    name: Build Base Image
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-22.04
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Free up disk space
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          docker system prune -af --volumes
          echo "After cleanup:"
          df -h

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/base/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_PREFIX }}-base:latest-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-base:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=base-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=base-${{ matrix.arch }}

  # Build all other containers in parallel
  build-containers:
    name: Build ${{ matrix.container }} Container
    needs: build-base
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container: [jvm, clang, rust, go, web]
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Free up disk space
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          docker system prune -af --volumes
          echo "After cleanup:"
          df -h

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.container }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/${{ matrix.container }}/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=${{ matrix.container }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.container }}-${{ matrix.arch }}
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}-base:${{ github.sha }}-${{ matrix.arch }}

  # Build Python container (depends on Clang)
  build-python:
    name: Build Python Container
    needs: build-containers
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Free up disk space
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /usr/local/lib/android /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          docker system prune -af --volumes
          echo "After cleanup:"
          df -h

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Python image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/python/Dockerfile
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.IMAGE_PREFIX }}-python:latest-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-python:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=python-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=python-${{ matrix.arch }}
          build-args: |
            CLANG_IMAGE=${{ env.IMAGE_PREFIX }}-clang:${{ github.sha }}-${{ matrix.arch }}

  # Test containers
  test-containers:
    name: Test ${{ matrix.container }} Container
    needs: [build-containers, build-python]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container: [jvm, clang, python, rust, go, web]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-${{ matrix.arch }}

      - name: Test ${{ matrix.container }} container
        run: |
          echo "Testing ${{ matrix.container }} container..."

          # Map container type to test directories
          case "${{ matrix.container }}" in
            jvm)
              TEST_DIRS="java kotlin clojure"
              ;;
            clang)
              TEST_DIRS="c cpp"
              ;;
            python)
              TEST_DIRS="python"
              ;;
            rust)
              TEST_DIRS="rust"
              ;;
            go)
              TEST_DIRS="go"
              ;;
            web)
              TEST_DIRS="nodejs web typescript"
              ;;
          esac

          # Run tests for each directory
          for dir in $TEST_DIRS; do
            if [ -d "tests/$dir" ]; then
              echo "Running $dir tests..."
              docker run --rm \
                -v ${{ github.workspace }}/tests/$dir:/workspace \
                --platform ${{ matrix.platform }} \
                ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-${{ matrix.arch }} \
                run_test_wrapper.sh
            fi
          done

  # Create multi-arch manifests
  create-manifests:
    name: Create Multi-arch Manifests
    needs: test-containers
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        container: [base, jvm, clang, python, rust, go, web]

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # Create manifest for latest tag
          docker manifest create \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-amd64 \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-arm64

          docker manifest push ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest

          # Create manifest for commit SHA
          docker manifest create \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }} \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-amd64 \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-arm64

          docker manifest push ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}