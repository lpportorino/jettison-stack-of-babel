name: Build Split Containers

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'dockerfiles/**'
      - '.github/workflows/build-split.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'dockerfiles/**'
      - '.github/workflows/build-split.yml'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push images to registry'
        required: false
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/jon-babylon

jobs:
  # Build base image first
  build-base:
    name: Build Base Image (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-22.04
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-22.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/base/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-base:test-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-base:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=base-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=base-${{ matrix.arch }},ignore-error=true

      - name: Test base image
        run: |
          docker run --rm ${{ env.IMAGE_PREFIX }}-base:test-${{ matrix.arch }} check_versions.sh

      - name: Push base image
        if: github.event_name != 'pull_request'
        run: |
          docker tag ${{ env.IMAGE_PREFIX }}-base:test-${{ matrix.arch }} ${{ env.IMAGE_PREFIX }}-base:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-base:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-base:${{ github.sha }}-${{ matrix.arch }}

  # Build all other containers in parallel
  build-containers:
    name: Build ${{ matrix.container }} Container (${{ matrix.arch }})
    needs: build-base
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        container: [jvm, clang, go, web]
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-22.04
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-22.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ matrix.container }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/${{ matrix.container }}/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:test-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=${{ matrix.container }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.container }}-${{ matrix.arch }},ignore-error=true
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}-base:${{ github.sha }}-${{ matrix.arch }}

      - name: Test ${{ matrix.container }} image
        run: |
          echo "=== Testing ${{ matrix.container }} container ==="

          # Run version check
          echo "Running version check..."
          docker run --rm ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:test-${{ matrix.arch }} check_versions.sh

          # Run container-specific tests
          echo "Running container tests..."
          TEST_DIR="dockerfiles/${{ matrix.container }}/tests"

          if [ -d "$TEST_DIR" ]; then
            for test_subdir in "$TEST_DIR"/*; do
              if [ -d "$test_subdir" ] && [ -f "$test_subdir/run_test.sh" ]; then
                TEST_NAME=$(basename "$test_subdir")
                echo "Running $TEST_NAME tests..."

                # Run tests with host user ID to avoid permission issues
                docker run --rm \
                  -u "$(id -u):$(id -g)" \
                  -v "$(pwd)/$test_subdir:/workspace" \
                  -w /workspace \
                  -e HOME=/tmp/home \
                  -e GOPATH=/tmp/go \
                  -e GOCACHE=/tmp/go-cache \
                  -e GRADLE_USER_HOME=/tmp/gradle \
                  -e MAVEN_USER_HOME=/tmp/maven \
                  ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:test-${{ matrix.arch }} \
                  bash run_test.sh || exit 1

                echo "✓ $TEST_NAME tests passed"
              fi
            done
          else
            echo "No test directory found for ${{ matrix.container }}"
          fi

          echo "✓ All tests passed for ${{ matrix.container }}"

      - name: Push ${{ matrix.container }} image
        if: github.event_name != 'pull_request'
        run: |
          docker tag ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:test-${{ matrix.arch }} ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-${{ matrix.arch }}

  # Build Python container (depends on Clang)
  build-python:
    name: Build Python Container (${{ matrix.arch }})
    needs: build-containers
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-22.04
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-22.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free disk space
        run: |
          echo "=== Disk space before cleanup ==="
          df -h

          echo "=== Cleaning up Docker ==="
          docker system prune -af --volumes

          echo "=== Removing unnecessary files ==="
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          echo "=== Disk space after cleanup ==="
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Python image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/python/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-python:test-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-python:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=python-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=python-${{ matrix.arch }},ignore-error=true
          build-args: |
            CLANG_IMAGE=${{ env.IMAGE_PREFIX }}-clang:${{ github.sha }}-${{ matrix.arch }}

      - name: Test Python image
        run: |
          echo "=== Testing Python container ==="

          # Run version check
          echo "Running version check..."
          docker run --rm ${{ env.IMAGE_PREFIX }}-python:test-${{ matrix.arch }} check_versions.sh

          # Run Python-specific tests
          echo "Running Python tests..."
          TEST_DIR="dockerfiles/python/tests"

          if [ -d "$TEST_DIR" ]; then
            for test_subdir in "$TEST_DIR"/*; do
              if [ -d "$test_subdir" ] && [ -f "$test_subdir/run_test.sh" ]; then
                TEST_NAME=$(basename "$test_subdir")
                echo "Running $TEST_NAME tests..."

                # Run tests with host user ID to avoid permission issues
                docker run --rm \
                  -u "$(id -u):$(id -g)" \
                  -v "$(pwd)/$test_subdir:/workspace" \
                  -w /workspace \
                  -e HOME=/tmp/home \
                  -e PYTHONUSERBASE=/tmp/python \
                  -e PIP_CACHE_DIR=/tmp/pip-cache \
                  ${{ env.IMAGE_PREFIX }}-python:test-${{ matrix.arch }} \
                  bash run_test.sh || exit 1

                echo "✓ $TEST_NAME tests passed"
              fi
            done
          else
            echo "No test directory found for Python"
          fi

          echo "✓ All tests passed for Python"

      - name: Push Python image
        if: github.event_name != 'pull_request'
        run: |
          docker tag ${{ env.IMAGE_PREFIX }}-python:test-${{ matrix.arch }} ${{ env.IMAGE_PREFIX }}-python:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-python:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-python:${{ github.sha }}-${{ matrix.arch }}

  # Build Rust container (depends on Clang)
  build-rust:
    name: Build Rust Container (${{ matrix.arch }})
    needs: build-containers
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-22.04
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-22.04-arm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free disk space
        run: |
          echo "=== Disk space before cleanup ==="
          df -h

          echo "=== Cleaning up Docker ==="
          docker system prune -af --volumes

          echo "=== Removing unnecessary files ==="
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          echo "=== Disk space after cleanup ==="
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Rust image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfiles/rust/Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          load: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-rust:test-${{ matrix.arch }}
            ${{ env.IMAGE_PREFIX }}-rust:${{ github.sha }}-${{ matrix.arch }}
          cache-from: type=gha,scope=rust-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=rust-${{ matrix.arch }},ignore-error=true
          build-args: |
            CLANG_IMAGE=${{ env.IMAGE_PREFIX }}-clang:${{ github.sha }}-${{ matrix.arch }}

      - name: Test Rust image
        run: |
          echo "=== Testing Rust container ==="

          # Run version check
          echo "Running version check..."
          docker run --rm ${{ env.IMAGE_PREFIX }}-rust:test-${{ matrix.arch }} check_versions.sh

          # Run Rust-specific tests
          echo "Running Rust tests..."
          TEST_DIR="dockerfiles/rust/tests"

          if [ -d "$TEST_DIR" ]; then
            for test_subdir in "$TEST_DIR"/*; do
              if [ -d "$test_subdir" ] && [ -f "$test_subdir/run_test.sh" ]; then
                TEST_NAME=$(basename "$test_subdir")
                echo "Running $TEST_NAME tests..."

                # Run tests with host user ID to avoid permission issues
                docker run --rm \
                  -u "$(id -u):$(id -g)" \
                  -v "$(pwd)/$test_subdir:/workspace" \
                  -w /workspace \
                  -e HOME=/tmp/home \
                  ${{ env.IMAGE_PREFIX }}-rust:test-${{ matrix.arch }} \
                  bash run_test.sh || exit 1

                echo "✓ $TEST_NAME tests passed"
              fi
            done
          else
            echo "No test directory found for Rust"
          fi

          echo "✓ All tests passed for Rust"

      - name: Push Rust image
        if: github.event_name != 'pull_request'
        run: |
          docker tag ${{ env.IMAGE_PREFIX }}-rust:test-${{ matrix.arch }} ${{ env.IMAGE_PREFIX }}-rust:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-rust:latest-${{ matrix.arch }}
          docker push ${{ env.IMAGE_PREFIX }}-rust:${{ github.sha }}-${{ matrix.arch }}

  # Create multi-arch manifests
  create-manifests:
    name: Create Multi-arch Manifests
    needs: [build-containers, build-python, build-rust]
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        container: [base, jvm, clang, python, rust, go, web]

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # Create manifest for latest tag
          docker manifest create \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-amd64 \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest-arm64

          docker manifest push ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:latest

          # Create manifest for commit SHA
          docker manifest create \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }} \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-amd64 \
            ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}-arm64

          docker manifest push ${{ env.IMAGE_PREFIX }}-${{ matrix.container }}:${{ github.sha }}