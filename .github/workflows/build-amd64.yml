name: Build AMD64 (Testing)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PLATFORM: linux/amd64
  ARCH_TAG: amd64

jobs:
  build-amd64:
    name: Build AMD64 Image (Testing Only)
    runs-on: ubuntu-22.04  # Standard x86_64 runner
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-amd64
            type=ref,event=pr,suffix=-amd64
            type=semver,pattern={{version}},suffix=-amd64
            type=semver,pattern={{major}}.{{minor}},suffix=-amd64
            type=raw,value=latest-amd64,enable={{is_default_branch}}
            type=sha,suffix=-amd64

      - name: Build AMD64 image (testing variant)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.x86_64
          platforms: linux/amd64
          push: false
          load: true
          tags: jon-babylon:amd64-test
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,scope=amd64,mode=max

      - name: Test AMD64 image - Version Check
        run: |
          echo "Testing AMD64 image (development/testing variant)..."
          docker run --rm jon-babylon:amd64-test /scripts/check_versions.sh

      - name: Test AMD64 image - Java
        run: |
          docker run --rm -v ${{ github.workspace }}/tests/java:/workspace \
            jon-babylon:amd64-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test AMD64 image - Python
        run: |
          docker run --rm -v ${{ github.workspace }}/tests/python:/workspace \
            jon-babylon:amd64-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test AMD64 image - Rust
        run: |
          docker run --rm -v ${{ github.workspace }}/tests/rust:/workspace \
            jon-babylon:amd64-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test AMD64 image - Node.js
        run: |
          docker run --rm -v ${{ github.workspace }}/tests/nodejs:/workspace \
            jon-babylon:amd64-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Test AMD64 image - Web Stack
        run: |
          docker run --rm -v ${{ github.workspace }}/tests/web:/workspace \
            jon-babylon:amd64-test \
            bash -c "cd /workspace && ./run_test.sh"

      - name: Push AMD64 image to registry
        if: github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.x86_64
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=amd64
          cache-to: type=gha,scope=amd64,mode=max

      - name: Generate AMD64 build report
        if: always()
        run: |
          echo "## AMD64 Build Report (Testing)" >> $GITHUB_STEP_SUMMARY
          echo "- Platform: linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "- Purpose: Development and Testing" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: ubuntu-22.04" >> $GITHUB_STEP_SUMMARY
          echo "- Build Time: $(date)" >> $GITHUB_STEP_SUMMARY
          docker images | grep jon-babylon >> $GITHUB_STEP_SUMMARY || true