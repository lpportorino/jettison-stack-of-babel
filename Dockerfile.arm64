# Jon-Babylon Docker Image - ARM64
# Target: Ubuntu 22.04 ARM64
# Build with: make build-arm64

FROM ubuntu:22.04 AS base

# Build arguments for optimization
ARG OPTFLAGS="-O3"

# Set architecture-specific environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    OPTFLAGS="${OPTFLAGS}" \
    CFLAGS="${OPTFLAGS}" \
    CXXFLAGS="${OPTFLAGS}" \
    LDFLAGS="-Wl,-O3" \
    RUSTFLAGS="-C opt-level=3" \
    MAKEFLAGS="-j$(nproc)"

# Note about optimization
RUN echo "Building ARM64 image" && \
    echo "Architecture: $(uname -m)" && \
    echo "Optimizations: ${OPTFLAGS}"

# Copy all installation scripts and tools
COPY tools/ /tmp/tools/
COPY scripts/ /tmp/scripts/

# Stage 00: Base setup
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        software-properties-common \
        wget \
        sudo \
        locales \
        git \
        unzip \
        xz-utils \
        patchelf && \
    locale-gen en_US.UTF-8 && \
    useradd -m -s /bin/bash -u 1000 developer && \
    echo "developer ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Stage 01: Build essentials with ARM64 optimizations
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        gcc-aarch64-linux-gnu \
        g++-aarch64-linux-gnu \
        cmake \
        ninja-build \
        pkg-config \
        autoconf \
        automake \
        libtool \
        libssl-dev \
        libffi-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        libncurses5-dev \
        libncursesw5-dev \
        zlib1g-dev \
        liblzma-dev \
        tk-dev \
        libxml2-dev \
        libxmlsec1-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Stage 02: Clojure CLI tools and clj-kondo
RUN chmod +x /tmp/tools/clojure/install.sh && \
    /tmp/tools/clojure/install.sh && \
    rm /tmp/tools/clojure/install.sh

# Stage 03: Go 1.25.1
RUN chmod +x /tmp/tools/golang/install.sh && \
    /tmp/tools/golang/install.sh && \
    rm /tmp/tools/golang/install.sh

# Stage 05: Python with ARM64 optimizations
RUN chmod +x /tmp/tools/python/install.sh /tmp/tools/python/nuitka.sh && \
    export PYTHON_CFLAGS="${OPTFLAGS}" && \
    export PYTHON_CONFIGURE_OPTS="--enable-optimizations --with-lto" && \
    /tmp/tools/python/install.sh && \
    /tmp/tools/python/nuitka.sh && \
    rm /tmp/tools/python/*.sh

# Stage 06: Clang/LLVM with ARM64 target
RUN chmod +x /tmp/tools/clang/install.sh && \
    LLVM_TARGETS="AArch64;X86" /tmp/tools/clang/install.sh && \
    rm /tmp/tools/clang/install.sh

# Stage 07: Rust with ARM64 optimizations
RUN chmod +x /tmp/tools/rust/install.sh && \
    RUST_TARGET="aarch64-unknown-linux-gnu" \
    RUSTFLAGS="-C opt-level=3" \
    /tmp/tools/rust/install.sh && \
    rm /tmp/tools/rust/install.sh

# Stage 08: Node.js
RUN chmod +x /tmp/tools/nodejs/install.sh && \
    /tmp/tools/nodejs/install.sh && \
    rm /tmp/tools/nodejs/install.sh

# Stage 09: JVM ecosystem (Java, Kotlin, Clojure, Maven, Gradle via SDKMAN)
RUN chmod +x /tmp/tools/build-tools/sdkman.sh && \
    /tmp/tools/build-tools/sdkman.sh && \
    rm /tmp/tools/build-tools/*.sh

# Stage 10: Bun JavaScript runtime
RUN chmod +x /tmp/tools/bun/install.sh && \
    /tmp/tools/bun/install.sh && \
    rm /tmp/tools/bun/install.sh

# Stage 11: Web tools and package managers
RUN chmod +x /tmp/tools/package-managers/install.sh \
              /tmp/tools/web-tools/install.sh \
              /tmp/tools/typescript/install.sh && \
    /tmp/tools/package-managers/install.sh && \
    /tmp/tools/web-tools/install.sh && \
    /tmp/tools/typescript/install.sh && \
    rm /tmp/tools/package-managers/install.sh \
       /tmp/tools/web-tools/install.sh \
       /tmp/tools/typescript/install.sh

# Stage 12: Final setup and environment configuration
COPY scripts/check_versions.sh /scripts/check_versions.sh
COPY scripts/setup_environment.sh /scripts/setup_environment.sh
COPY scripts/run_test_wrapper.sh /usr/local/bin/run_test_wrapper.sh
RUN chmod +x /scripts/check_versions.sh /scripts/setup_environment.sh /usr/local/bin/run_test_wrapper.sh && \
    /scripts/setup_environment.sh

# Set PATH for all subsequent commands
ENV PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/opt/cargo/bin:/usr/local/go/bin:/opt/pyenv/bin:/opt/bun/bin:/usr/lib/llvm-21/bin"
ENV JAVA_HOME="/opt/sdkman/candidates/java/current"
ENV MAVEN_HOME="/opt/sdkman/candidates/maven/current"
ENV GRADLE_HOME="/opt/sdkman/candidates/gradle/current"
ENV CARGO_HOME="/opt/cargo"
ENV RUSTUP_HOME="/opt/rustup"
ENV GOROOT="/usr/local/go"
ENV GOPATH="/home/developer/go"
ENV PYENV_ROOT="/opt/pyenv"
ENV BUN_INSTALL="/opt/bun"
ENV CC="clang"
ENV CXX="clang++"

# Create workspace directory and ensure proper ownership
RUN mkdir -p /workspace && \
    chown -R developer:developer /workspace && \
    chmod 755 /workspace

# Clean up temporary files
RUN rm -rf /tmp/tools /tmp/scripts

# Ensure all tool directories are accessible by developer
RUN chown -R developer:developer /opt/pyenv /opt/cargo /opt/rustup /opt/bun 2>/dev/null || true && \
    chown -R developer:developer /opt/sdkman 2>/dev/null || true && \
    chmod -R 755 /opt/pyenv /opt/cargo /opt/rustup /opt/bun 2>/dev/null || true

# Switch to non-root user
USER developer
WORKDIR /workspace

# Set final environment with proper PATH
ENV PATH="/usr/local/bin:/opt/cargo/bin:/usr/local/go/bin:/opt/pyenv/bin:/opt/bun/bin:/opt/sdkman/candidates/java/current/bin:/opt/sdkman/candidates/kotlin/current/bin:/opt/sdkman/candidates/maven/current/bin:/opt/sdkman/candidates/gradle/current/bin:/opt/sdkman/candidates/leiningen/current/bin:/home/developer/.local/bin:/usr/bin:/bin" \
    JAVA_HOME="/opt/sdkman/candidates/java/current" \
    MAVEN_HOME="/opt/sdkman/candidates/maven/current" \
    GRADLE_HOME="/opt/sdkman/candidates/gradle/current" \
    CARGO_HOME="/opt/cargo" \
    RUSTUP_HOME="/opt/rustup" \
    PYENV_ROOT="/opt/pyenv" \
    GOROOT="/usr/local/go" \
    GOPATH="/home/developer/go" \
    BUN_INSTALL="/opt/bun" \
    SDKMAN_DIR="/opt/sdkman" \
    DOCKER_ARCH="arm64" \
    DOCKER_PLATFORM="linux/arm64"

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python3 --version && node --version && rustc --version || exit 1

# Labels
LABEL maintainer="Jettison Team" \
      version="arm64" \
      description="Jon-Babylon polyglot development image for ARM64" \
      target.platform="linux/arm64" \
      optimization.flags="${OPTFLAGS}"

# Default command
CMD ["/bin/bash"]